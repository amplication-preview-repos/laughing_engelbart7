/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Nft as PrismaNft,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class NftServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NftCountArgs, "select">): Promise<number> {
    return this.prisma.nft.count(args);
  }

  async nfts<T extends Prisma.NftFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NftFindManyArgs>
  ): Promise<PrismaNft[]> {
    return this.prisma.nft.findMany<Prisma.NftFindManyArgs>(args);
  }
  async nft<T extends Prisma.NftFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NftFindUniqueArgs>
  ): Promise<PrismaNft | null> {
    return this.prisma.nft.findUnique(args);
  }
  async createNft<T extends Prisma.NftCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NftCreateArgs>
  ): Promise<PrismaNft> {
    return this.prisma.nft.create<T>(args);
  }
  async updateNft<T extends Prisma.NftUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NftUpdateArgs>
  ): Promise<PrismaNft> {
    return this.prisma.nft.update<T>(args);
  }
  async deleteNft<T extends Prisma.NftDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NftDeleteArgs>
  ): Promise<PrismaNft> {
    return this.prisma.nft.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.nft
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
